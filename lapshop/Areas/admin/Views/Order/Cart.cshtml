@model ShoppingCartItem

@section headLinks {
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.rtl.min.css" integrity="sha384-PHTyWNmAHltxg0Pcg6lkQageJMXHGw0ouQm0DQqAwbRQEOedknmPIBThjQW5qDT2" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" integrity="sha512-Fo3rlrZj/k7ujTnHg4CGR2D7kSs0v4LLanw2qksYuRlEzO+tcaEPQogQ0KaoGN26/zrn20ImR1DfuLWnOo7aBA==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Cairo:wght@400;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Cairo', sans-serif;
            background-color: #f0f2f5;
        }

        .cart-item-img {
            width: 100px;
            height: 100px;
            object-fit: cover;
        }

        .quantity-input {
            text-align: center;
            width: 50px;
            margin: 0 5px;
            height: calc(2.25rem + 2px);
        }
    </style>
}

<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-lg-9 col-md-10 bg-white shadow-lg rounded-4 p-4 mb-5">
            <h3 class="mb-4 text-center fw-bold text-dark">Your Shopping Cart</h3>
            <hr class="mb-4">

            @if (Model != null && Model.CartItems.Any())
            {
                <div id="cartItemsContainer">
                    @foreach (var carItem in Model.CartItems)
                    {
                        <div class="d-flex align-items-center flex-wrap py-3 border-bottom" data-item-id="@carItem.ItemId">
                            <div class="flex-grow-1 me-3 mb-2 mb-md-0">
                                <h5 class="fw-bold text-dark mb-1">@carItem.ItemName</h5>
                            </div>

                            <div class="d-flex align-items-center me-3 mb-2 mb-md-0">
                                <button class="btn btn-outline-secondary btn-sm rounded-circle" data-item-id="@carItem.ItemId" data-action="minus" style="width: 35px; height: 35px;"><i class="fas fa-minus"></i></button>
                                <input type="number" class="form-control quantity-input text-center bg-light" value="@carItem.Qty" min="1" data-price="@carItem.Price" data-item-id="@carItem.ItemId">
                                <button class="btn btn-outline-secondary btn-sm rounded-circle" data-item-id="@carItem.ItemId" data-action="plus" style="width: 35px; height: 35px;"><i class="fas fa-plus"></i></button>
                            </div>

                            <div class="fw-bold text-success fs-5 me-3 mb-2 mb-md-0" data-item-id="@carItem.ItemId">$@((carItem.Price * carItem.Qty).ToString("0.00"))</div>
                            <button class="btn btn-link text-danger p-0" data-item-id="@carItem.ItemId" data-action="delete">
                                <i class="fas fa-trash-alt fs-5"></i>
                            </button>
                        </div>
                    }
                </div>

                <hr class="my-4">

                <div class="bg-light p-4 rounded-3 shadow-sm">
                    <h5 class="text-center fw-bold mb-3 text-dark">Order Summary</h5>
                    <div class="d-flex justify-content-between mb-2 pb-2 border-bottom">
                        <span class="text-dark">Subtotal:</span>
                        <span class="text-dark fw-bold" id="subtotalPrice">$0.00</span>
                    </div>
                    <div class="d-flex justify-content-between mb-2 pb-2 border-bottom">
                        <span class="text-dark">Tax (e.g. 10%):</span>
                        <span class="text-dark fw-bold" id="taxPrice">$0.00</span>
                    </div>
                    <div class="d-flex justify-content-between mb-3 pb-2 border-bottom">
                        <span class="text-dark">Shipping:</span>
                        <span class="text-success fw-bold">Free</span>
                    </div>
                    <div class="d-flex justify-content-between align-items-center mb-4">
                        <h4 class="mb-0 text-dark">Grand Total:</h4>
                        <h4 class="mb-0 text-primary fw-bold fs-3" id="grandTotalPrice">$@Model.total</h4>
                    </div>
                    <div class="d-grid gap-3 d-md-flex justify-content-md-end">
                        <a asp-area="admin" asp-controller="Order" asp-action="OrderSuccess" class="btn btn-success btn-lg fw-bold rounded-pill shadow-sm" type="button"><i class="fas fa-money-check-alt me-2"></i> Checkout</a>
                        <a asp-controller="Home" asp-action="AllProducts" class="btn btn-outline-primary btn-lg fw-bold rounded-pill" type="button"><i class="fas fa-arrow-left me-2"></i> Continue Shopping</a>
                    </div>

                </div>

            }
            else
            {
                <div class="text-center p-5 bg-light rounded-3">
                    <p class="lead text-muted mb-4">Your shopping cart is currently empty. Start shopping now!</p>
                    <a asp-action="AllProducts" asp-controller="Home" class="btn btn-primary btn-lg"><i class="fas fa-shopping-basket me-2"></i> Go to Shop</a>
                </div>
            }
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js" integrity="sha384-geWF76RCwLtnZ8qwWowPQNguL3RmwHVBC9FhG5nbyIjg0MTriLFhdwIjo9WaYkizs+N" crossorigin="anonymous"></script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        const cartItemsContainer = document.getElementById('cartItemsContainer');
        const subtotalPriceElement = document.getElementById('subtotalPrice');
        const taxPriceElement = document.getElementById('taxPrice');
        const grandTotalPriceElement = document.getElementById('grandTotalPrice');
        const taxRate = 0.10;

        function updateCartSummary() {
            let subtotal = 0;
            document.querySelectorAll('.d-flex[data-item-id]').forEach(itemElement => {
                const quantityInput = itemElement.querySelector('.quantity-input');
                const price = parseFloat(quantityInput.dataset.price);
                const quantity = parseInt(quantityInput.value);
                const itemTotalElement = itemElement.querySelector('.fw-bold.text-success.fs-5');

                const itemCalculatedTotal = price * quantity;
                itemTotalElement.textContent = `$${itemCalculatedTotal.toFixed(2)}`;
                subtotal += itemCalculatedTotal;
            });

            const tax = subtotal * taxRate;
            const grandTotal = subtotal + tax;

            subtotalPriceElement.textContent = `$${subtotal.toFixed(2)}`;
            taxPriceElement.textContent = `$${tax.toFixed(2)}`;
            grandTotalPriceElement.textContent = `$${grandTotal.toFixed(2)}`;
        }

        cartItemsContainer.addEventListener('click', function (event) {
            const target = event.target.closest('button');
            if (!target) return;

            const itemId = target.dataset.itemId;
            const action = target.dataset.action;

            if (action === 'plus' || action === 'minus') {
                const quantityInput = document.querySelector(`.quantity-input[data-item-id="${itemId}"]`);
                let currentQuantity = parseInt(quantityInput.value);

                if (action === 'plus') {
                    currentQuantity++;
                } else if (action === 'minus' && currentQuantity > 1) {
                    currentQuantity--;
                }
                quantityInput.value = currentQuantity;
                updateCartSummary();
            } else if (action === 'delete') {
                const itemToRemove = document.querySelector(`.d-flex[data-item-id="${itemId}"]`);
                if (itemToRemove) {
                    itemToRemove.remove();
                    updateCartSummary();
                }
            }
        });

        cartItemsContainer.addEventListener('change', function (event) {
            const target = event.target;
            if (target.classList.contains('quantity-input')) {
                let currentQuantity = parseInt(target.value);
                if (isNaN(currentQuantity) || currentQuantity < 1) {
                    target.value = 1;
                }
                updateCartSummary();
            }
        });

        updateCartSummary();
    });
</script>